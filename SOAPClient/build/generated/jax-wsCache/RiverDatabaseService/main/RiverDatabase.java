
package main;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.6-1b01 
 * Generated source version: 2.2
 * 
 */
@WebService(name = "RiverDatabase", targetNamespace = "http://main/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface RiverDatabase {


    /**
     * 
     * @param arg1
     * @param arg0
     */
    @WebMethod
    @RequestWrapper(localName = "addRiver", targetNamespace = "http://main/", className = "main.AddRiver")
    @ResponseWrapper(localName = "addRiverResponse", targetNamespace = "http://main/", className = "main.AddRiverResponse")
    @Action(input = "http://main/RiverDatabase/addRiverRequest", output = "http://main/RiverDatabase/addRiverResponse")
    public void addRiver(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        int arg1);

    /**
     * 
     * @param arg1
     * @param arg0
     */
    @WebMethod
    @RequestWrapper(localName = "makeTeibutary", targetNamespace = "http://main/", className = "main.MakeTeibutary")
    @ResponseWrapper(localName = "makeTeibutaryResponse", targetNamespace = "http://main/", className = "main.MakeTeibutaryResponse")
    @Action(input = "http://main/RiverDatabase/makeTeibutaryRequest", output = "http://main/RiverDatabase/makeTeibutaryResponse")
    public void makeTeibutary(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1);

    /**
     * 
     * @param arg0
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getRivers", targetNamespace = "http://main/", className = "main.GetRivers")
    @ResponseWrapper(localName = "getRiversResponse", targetNamespace = "http://main/", className = "main.GetRiversResponse")
    @Action(input = "http://main/RiverDatabase/getRiversRequest", output = "http://main/RiverDatabase/getRiversResponse")
    public String getRivers(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0);

    /**
     * 
     * @param arg1
     * @param arg0
     */
    @WebMethod
    @RequestWrapper(localName = "updateLength", targetNamespace = "http://main/", className = "main.UpdateLength")
    @ResponseWrapper(localName = "updateLengthResponse", targetNamespace = "http://main/", className = "main.UpdateLengthResponse")
    @Action(input = "http://main/RiverDatabase/updateLengthRequest", output = "http://main/RiverDatabase/updateLengthResponse")
    public void updateLength(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        int arg1);

    /**
     * 
     * @param arg0
     */
    @WebMethod
    @RequestWrapper(localName = "deleteRiver", targetNamespace = "http://main/", className = "main.DeleteRiver")
    @ResponseWrapper(localName = "deleteRiverResponse", targetNamespace = "http://main/", className = "main.DeleteRiverResponse")
    @Action(input = "http://main/RiverDatabase/deleteRiverRequest", output = "http://main/RiverDatabase/deleteRiverResponse")
    public void deleteRiver(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0);

    /**
     * 
     * @param arg0
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "checkIfRiverExists", targetNamespace = "http://main/", className = "main.CheckIfRiverExists")
    @ResponseWrapper(localName = "checkIfRiverExistsResponse", targetNamespace = "http://main/", className = "main.CheckIfRiverExistsResponse")
    @Action(input = "http://main/RiverDatabase/checkIfRiverExistsRequest", output = "http://main/RiverDatabase/checkIfRiverExistsResponse")
    public String checkIfRiverExists(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0);

    /**
     * 
     * @return
     *     returns java.util.List<main.River>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllRivers", targetNamespace = "http://main/", className = "main.GetAllRivers")
    @ResponseWrapper(localName = "getAllRiversResponse", targetNamespace = "http://main/", className = "main.GetAllRiversResponse")
    @Action(input = "http://main/RiverDatabase/getAllRiversRequest", output = "http://main/RiverDatabase/getAllRiversResponse")
    public List<River> getAllRivers();

}
